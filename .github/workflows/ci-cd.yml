name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: magic8ball
          POSTGRES_DB: magic_eight_ball
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    env:
      NODE_ENV: test
      DATABASE_URL: postgresql://magic8ball:testpassword@localhost:5432/magic_eight_ball
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: magic_eight_ball
      DB_USER: magic8ball
      DB_PASSWORD: testpassword
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install PostgreSQL client
      run: sudo apt-get update && sudo apt-get install -y postgresql-client

    - name: Set up test database
      run: |
        # Wait for PostgreSQL to be ready
        timeout 60s bash -c 'until pg_isready -h localhost -p 5432 -U magic8ball; do sleep 2; done'
        
        # Run database initialization
        PGPASSWORD=testpassword psql -h localhost -U magic8ball -d magic_eight_ball -f init.sql

    - name: Run tests
      run: npm test

    - name: Run linting (if available)
      run: |
        if npm list eslint 2>/dev/null; then
          npm run lint
        else
          echo "ESLint not configured, skipping..."
        fi
      continue-on-error: true

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to EC2
      run: |
        # Get the latest image tag (extract just the image:tag part)
        IMAGE_TAG=$(echo "${{ needs.build-and-push.outputs.image-tag }}" | head -1)
        echo "Deploying image: $IMAGE_TAG"
        
        # Get EC2 instance public IP
        INSTANCE_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=magic8ball-server" "Name=instance-state-name,Values=running" \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        
        echo "Deploying to IP: $INSTANCE_IP"
        
        # Create deployment script that updates the existing configuration
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        IMAGE_TAG="$1"
        INSTANCE_IP="$2"
        
        echo "Updating Magic 8-Ball deployment..."
        echo "Image: $IMAGE_TAG"
        echo "IP: $INSTANCE_IP"
        
        # Navigate to application directory
        cd /opt/magic8ball
        
        # Stop existing containers
        sudo docker-compose -f docker-compose.prod.yml down || true
        
        # Update the docker-compose file with new image and correct domains
        sudo sed -i "s|image: ghcr.io/jakepage91/magic-eight-ball:.*|image: $IMAGE_TAG|g" docker-compose.prod.yml
        
        # Update domain names to use current IP
        sudo sed -i "s/magic8ball\.[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\.traefik\.me/magic8ball.$INSTANCE_IP.traefik.me/g" docker-compose.prod.yml
        sudo sed -i "s/traefik\.[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\.traefik\.me/traefik.$INSTANCE_IP.traefik.me/g" docker-compose.prod.yml
        
        # Also handle the case where domains don't have IP yet
        sudo sed -i "s/magic8ball\.traefik\.me/magic8ball.$INSTANCE_IP.traefik.me/g" docker-compose.prod.yml
        sudo sed -i "s/traefik\.traefik\.me/traefik.$INSTANCE_IP.traefik.me/g" docker-compose.prod.yml
        
        # Pull the new image
        sudo docker pull "$IMAGE_TAG"
        
        # Start updated services
        sudo docker-compose -f docker-compose.prod.yml up -d
        
        # Clean up old images
        sudo docker image prune -f || true
        
        echo "Deployment complete!"
        echo "Application URL: http://magic8ball.$INSTANCE_IP.traefik.me"
        echo "Dashboard URL: http://traefik.$INSTANCE_IP.traefik.me"
        EOF
        
        # Make script executable and copy to EC2
        chmod +x deploy.sh
        
        # Use SSM to execute deployment
        COMMAND_ID=$(aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --targets "Key=tag:Name,Values=magic8ball-server" \
          --parameters commands="$(base64 -w 0 deploy.sh | sed 's/^/echo /' | sed 's/$/ | base64 -d | bash -s '"$IMAGE_TAG"' '"$INSTANCE_IP"'/')" \
          --output text \
          --query 'Command.CommandId')
        
        echo "Deployment command ID: $COMMAND_ID"
        
        # Wait for deployment to complete (optional)
        aws ssm wait command-executed \
          --command-id "$COMMAND_ID" \
          --instance-id $(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=magic8ball-server" "Name=instance-state-name,Values=running" \
            --query 'Reservations[0].Instances[0].InstanceId' \
            --output text) || echo "Deployment may still be in progress"
        
        echo "Deployment initiated successfully!"
        echo "Application will be available at: http://magic8ball.$INSTANCE_IP.traefik.me" 